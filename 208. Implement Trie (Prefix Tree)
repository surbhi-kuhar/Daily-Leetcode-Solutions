struct Node{
    Node*arr[26];
    bool flag=false;

    bool isPresent(char ch){
        return arr[ch-'a']!=NULL;
    }
    Node*next(char ch){
        return arr[ch-'a'];
    }
    void put(char ch,Node*node){
        arr[ch-'a']=node;
    }
    void setEnd(){
        flag=true;
    }
    bool getEnd(){
        return flag;
    }
};

class Trie {
    private: Node*root;
public:
    Trie() {
       root=new Node(); 
    }
    
    void insert(string word) {
        Node*node=root;
        for(int i=0;i<word.length();i++){
            if(!node->isPresent(word[i])){
                node->put(word[i],new Node());
            }
            node=node->next(word[i]);
        }
        node->setEnd();
    }
    
    bool search(string word) {
        Node*node=root;
        for(int i=0;i<word.length();i++){
            if(node->isPresent(word[i])){
                node=node->next(word[i]);
            }
            else{
                return false;
            }
           
        }
        return node->getEnd();
    }
    
    bool startsWith(string prefix) {
        Node*node=root;
        for(int i=0;i<prefix.length();i++){
            if(node->isPresent(prefix[i])){
                node=node->next(prefix[i]);
            }
            else{
                return false;
            }
           
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
