class Solution {
public:

    void dfs(unordered_map<int,bool>&vis, unordered_map<int,list<int>>&adj,int index){
        vis[index]=1;
        for(auto i:adj[index]){
            if(!vis[i]){
                dfs(vis,adj,i);
            }
        }


    }


    int findCircleNum(vector<vector<int>>& isConnected) {

        int n=isConnected[0].size();
        unordered_map<int,list<int>>adj;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1){
                    int u=i;
                    int v=j;

                    adj[u].push_back(v);
                    adj[v].push_back(u);
                }
            }
        }

        unordered_map<int,bool>vis;
        int count=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                count++;
                dfs(vis,adj,i);
            }
        }

        return count;

        
    }
};
